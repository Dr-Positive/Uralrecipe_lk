import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";
import { render } from "@react-email/render";
import { ResetCodeEmail } from "../templates/emailTemplate.js";
import transporter from "../utils/emailTransporter.js";
import { User } from "../models/models.js";
import * as React from "react";

// ============ –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ ============
const generateResetToken = (id, login, tel) => {
  return jwt.sign({ id, login, tel }, process.env.SECRET_KEY, { expiresIn: "12h" });
};

const veryResetToken = async (token) => {
  return new Promise((resolve) => {
    jwt.verify(token, process.env.SECRET_KEY, async (err, decoded) => {
      if (err) resolve(false);
      else resolve(decoded.login || false);
    });
  });
};

// ============ –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ ============
async function sendResetEmail(user, resetToken) {
  const resetLink = `${process.env.CLIENT_URL}/password_reset?resetToken=${resetToken}`;
  const html = await  render(
    React.createElement(ResetCodeEmail, { code: resetLink })
  );

  await transporter.sendMail({
    from: process.env.MAIL_LOGIN,
    to: user.email || user.login, // login –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –µ—Å–ª–∏ —ç—Ç–æ email
    subject: "–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è ‚Äî U-RM",
    html,
  });

  console.log(`üì© –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.login} (${user.email})`);
  return resetLink;
}

// ============ –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä ============
class AuthController {

  // üîπ –°—Ü–µ–Ω–∞—Ä–∏–π 1: –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (—á–µ—Ä–µ–∑ ProfilePage)
  async requestResetToken(req, res) {
    try {
      const { login, password } = req.body;

      if (!login || !password) {
        return res.status(400).json({ success: false, message: "–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã." });
      }

      const user = await User.findOne({ where: { login } });
      if (!user) {
        return res.status(404).json({ success: false, message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω." });
      }

      const isPasswordValid = await bcrypt.compare(password, user.password);
      if (!isPasswordValid) {
        return res.status(401).json({ success: false, message: "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å." });
      }

      if (!user.email) {
        return res.status(400).json({ success: false, message: "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω email." });
      }

      const resetToken = generateResetToken(user.id, user.login, user.tel);
      await User.update({ resetToken }, { where: { id: user.id } });

      const resetLink = await sendResetEmail(user, resetToken);

      return res.status(200).json({
        success: true,
        message: "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–±—Ä–æ—Å—É –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É. –í —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–∏—Å—å–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ø–∞–º.",
        resetLink,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ —Å–±—Ä–æ—Å–∞:", error);
      return res.status(500).json({ success: false, message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞." });
    }
  }

  // üîπ –°—Ü–µ–Ω–∞—Ä–∏–π 2: –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (—á–µ—Ä–µ–∑ ¬´–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å¬ª)
  async handleForgotPassword(req, res) {
    try {
      const { login, tel } = req.body;

      if (!login || !tel) {
        return res.status(400).json({ success: false, message: "–õ–æ–≥–∏–Ω –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã." });
      }

      const user = await User.findOne({ where: { login, tel } });
      if (!user) {
        return res.status(404).json({ success: false, message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω." });
      }

      if (!user.email) {
        return res.status(400).json({ success: false, message: "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω email." });
      }

      const resetToken = generateResetToken(user.id, user.login, user.tel);
      await User.update({ resetToken }, { where: { id: user.id } });

      const resetLink = await sendResetEmail(user, resetToken);

      return res.json({
        success: true,
        message: "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–±—Ä–æ—Å—É –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É. –í —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–∏—Å—å–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ø–∞–º.",
        resetLink,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Å—ã–ª–∫–∏ —Å–±—Ä–æ—Å–∞:", error);
      return res.status(500).json({ success: false, message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞." });
    }
  }

  // üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
  async verifyToken(req, res) {
    const { token } = req.body;
    if (!token) {
      return res.status(400).json({ success: false, message: "–¢–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω." });
    }

    try {
      const login = await veryResetToken(token);
      if (!login) {
        return res.status(400).json({ success: false, message: "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω." });
      }

      const user = await User.findOne({ where: { login } });
      if (!user || user.resetToken !== token) {
        return res.status(400).json({ success: false, message: "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω." });
      }

      return res.status(200).json({ success: true, message: "–¢–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω", login });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞:", error);
      return res.status(500).json({ success: false, message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞." });
    }
  }

  // üîπ –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
  async resetPassword(req, res) {
    try {
      const { token, password } = req.body;

      if (!token || !password) {
        return res.status(400).json({ success: false, message: "–¢–æ–∫–µ–Ω –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã." });
      }

      const login = await veryResetToken(token);
      if (!login) {
        return res.status(400).json({ success: false, message: "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω." });
      }

      const user = await User.findOne({ where: { login } });
      if (!user || user.resetToken !== token) {
        return res.status(400).json({ success: false, message: "–¢–æ–∫–µ–Ω –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é." });
      }

      const hashedPassword = await bcrypt.hash(password, 5);
      await User.update({ password: hashedPassword, resetToken: null }, { where: { id: user.id } });

      return res.status(200).json({ success: true, message: "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω." });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è:", error);
      return res.status(500).json({ success: false, message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞." });
    }
  }
}

export default new AuthController();
