import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";
import { render } from "@react-email/render";
import { ResetCodeEmail } from "../templates/emailTemplateResetEmail.js";
import { ResetCodePassword } from "../templates/emailTemplatePassword.js";
import transporter from "../utils/emailTransporter.js";
import { User } from "../models/models.js";
import * as React from "react";

// ============ –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ ============
const generateToken = (payload, expiresIn = "12h") => {
  return jwt.sign(payload, process.env.SECRET_KEY, { expiresIn });
};

const generateJwt = (id, login, email, tel, compl, role) => {
  return jwt.sign({id, login, email, tel, compl, role}, process.env.SECRET_KEY, {
    expiresIn: "12h",
  });
};


const verifyToken = async (token) => {
  return new Promise((resolve) => {
    jwt.verify(token, process.env.SECRET_KEY, (err, decoded) => {
      if (err) resolve(false);
      else resolve(decoded);
    });
  });
};

// ============ –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º ============

// üîπ –ü–∏—Å—å–º–æ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
async function sendPasswordResetEmail(user, resetToken) {
  const resetLink = `${process.env.CLIENT_URL}/password_reset?resetToken=${resetToken}`;
  const html = await render(
    React.createElement(ResetCodePassword, { code: resetLink })
  );

  await transporter.sendMail({
    from: process.env.MAIL_LOGIN,
    to: user.email || user.login,
    subject: "–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è ‚Äî U-RM",
    html,
  });

  console.log(`üì© –ü–∏—Å—å–º–æ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.login}`);
  return resetLink;
}

// üîπ –ü–∏—Å—å–º–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ email
async function sendEmailChangeEmail(user, newEmail, confirmToken) {
  const confirmLink = `${process.env.CLIENT_URL}/confirm_email?token=${confirmToken}`;
  const html = await render(
    React.createElement(ResetCodeEmail, { code: confirmLink })
  );

  await transporter.sendMail({
    from: process.env.MAIL_LOGIN,
    to: newEmail,
    subject: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è email ‚Äî U-RM",
    html,
  });

  console.log(`üì© –ü–∏—Å—å–º–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${newEmail}`);
  return confirmLink;
}

// ============ –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä ============
class AuthController {
  /* ========== üîê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ü–ê–†–û–õ–Ø ========== */

  // –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
  async requestResetToken(req, res) {
    try {
      const { login, password } = req.body;

      if (!login || !password)
        return res.status(400).json({ message: "–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã." });

      const user = await User.findOne({ where: { login } });
      if (!user) return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω." });

      const isPasswordValid = await bcrypt.compare(password, user.password);
      if (!isPasswordValid)
        return res.status(401).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å." });

      if (!user.email)
        return res.status(400).json({ message: "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω email." });

      const resetToken = generateToken({ id: user.id, login: user.login });
      await user.update({ resetToken });

      const resetLink = await sendPasswordResetEmail(user, resetToken);
      return res.json({
        success: true,
        message: "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É.",
        resetLink,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ —Å–±—Ä–æ—Å–∞:", error);
      return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞." });
    }
  }

  // –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
  async handleForgotPassword(req, res) {
    try {
      const { login, tel } = req.body;

      if (!login || !tel)
        return res.status(400).json({ message: "–õ–æ–≥–∏–Ω –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã." });

      const user = await User.findOne({ where: { login, tel } });
      if (!user) return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω." });

      const resetToken = generateToken({ id: user.id, login: user.login });
      await user.update({ resetToken });

      const resetLink = await sendPasswordResetEmail(user, resetToken);
      return res.json({
        success: true,
        message: "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–±—Ä–æ—Å—É –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É.",
        resetLink,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è:", error);
      return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞." });
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
  async verifyToken(req, res) {
    const { token } = req.body;
    if (!token)
      return res.status(400).json({ message: "–¢–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω." });

    const decoded = await verifyToken(token);
    if (!decoded)
      return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω." });

    const user = await User.findOne({ where: { login: decoded.login } });
    if (!user || user.resetToken !== token)
      return res.status(400).json({ message: "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω." });

    return res.json({ success: true, message: "–¢–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω", login: decoded.login });
  }

  // –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
  async resetPassword(req, res) {
    try {
      const { token, password } = req.body;

      if (!token || !password)
        return res.status(400).json({ message: "–¢–æ–∫–µ–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã." });

      const decoded = await verifyToken(token);
      if (!decoded)
        return res.status(400).json({ message: "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω." });

      const user = await User.findOne({ where: { login: decoded.login } });
      if (!user || user.resetToken !== token)
        return res.status(400).json({ message: "–¢–æ–∫–µ–Ω –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é." });

      const hashedPassword = await bcrypt.hash(password, 5);
      await user.update({ password: hashedPassword, resetToken: null });

      return res.json({ success: true, message: "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω." });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è:", error);
      return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞." });
    }
  }

  /* ========== üìß –°–ú–ï–ù–ê EMAIL ========== */

  async requestEmailChange(req, res) {
    try {
      const { login, password, newEmail } = req.body;

      if (!login || !password || !newEmail)
        return res.status(400).json({ message: "–õ–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å –∏ –Ω–æ–≤—ã–π email –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã." });

      const user = await User.findOne({ where: { login } });
      if (!user)
        return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω." });

      const validPassword = await bcrypt.compare(password, user.password);
      if (!validPassword)
        return res.status(401).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å." });

      const confirmToken = generateToken({ id: user.id, login, newEmail });
      await user.update({ pendingEmail: newEmail, resetToken: confirmToken });

      const confirmLink = await sendEmailChangeEmail(user, newEmail, confirmToken);
      return res.json({
        success: true,
        message: "–ü–∏—Å—å–º–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.",
        confirmLink,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ email:", error);
      return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞." });
    }
  }

  async verifyEmailChange(req, res) {
  try {
    const { token } = req.body;

    if (!token)
      return res.status(400).json({ message: "–¢–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω." });

    const decoded = jwt.verify(token, process.env.SECRET_KEY);

    const user = await User.findOne({ where: { id: decoded.id } });
    if (!user || user.resetToken !== token)
      return res.status(400).json({ message: "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å." });

    await user.update({
      email: user.pendingEmail,
      pendingEmail: null,
      emailVerified: true,
      resetToken: null,
    });

    // üü¢ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º email
    const newToken = generateJwt(user);

    return res.json({
      success: true,
      message: "Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.",
      token: newToken,
      user, // –≤–µ—Ä–Ω—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ email:", error);
    return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞." });
  }
}
  async confirmEmailChange(req, res) {
  try {
    const { token } = req.body;
    if (!token) {
      return res.status(400).json({ success: false, message: "–¢–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω." });
    }

    // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω
    const decoded = jwt.verify(token, process.env.SECRET_KEY);
    const { id, login, newEmail } = decoded;

    if (!id || !newEmail) {
      return res.status(400).json({ success: false, message: "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω." });
    }

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findOne({ where: { id, login } });
    if (!user) {
      return res.status(404).json({ success: false, message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω." });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å pendingEmail
    if (user.pendingEmail !== newEmail) {
      return res.status(400).json({ success: false, message: "Email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç." });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º email
    await user.update({
      email: newEmail,
      emailVerified: true,
      pendingEmail: null,
      resetToken: null
    });

    return res.status(200).json({ success: true, message: "Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ –æ–±–Ω–æ–≤–ª—ë–Ω." });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ email:", error);
    if (error.name === "TokenExpiredError") {
      return res.status(400).json({ success: false, message: "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –∏—Å—Ç—ë–∫." });
    }
    return res.status(500).json({ success: false, message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ email." });
  }
}


}

export default new AuthController();
