import styles from "./ProfilePage.module.scss";
import { useState, useContext } from 'react';
import Header from "../components/Header";
import Footer from "../components/Footer";
import { Context } from '../index';
import { observer } from "mobx-react-lite";
import Button from 'react-bootstrap/Button';
import Modal from 'react-bootstrap/Modal';
import Alert from 'react-bootstrap/Alert';
import { requestResetToken, requestEmailChange } from "../http/authApi.js";
import { logining } from "../http/userAPI";

const ProfilePage = observer(() => {
  const { user } = useContext(Context);

  // üîπ –û–±—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [mode, setMode] = useState(null); // "password" | "email"
  const [alertMessage, setAlertMessage] = useState('');
  const [alertVariant, setAlertVariant] = useState('success');

  // üî∏ –ú–æ–¥–∞–ª–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
  const [showConfirm, setShowConfirm] = useState(false);
  const [oldPassword, setOldPassword] = useState('');
  const [confirmError, setConfirmError] = useState('');

  // üî∏ –ú–æ–¥–∞–ª–∫–∞ —Å–º–µ–Ω—ã email
  const [showEmailModal, setShowEmailModal] = useState(false);
  const [newEmail, setNewEmail] = useState('');
  const [emailError, setEmailError] = useState('');

  const handlePasswordConfirm = (selectedMode) => {
    setMode(selectedMode);
    setShowConfirm(true);
    setConfirmError('');
    setOldPassword('');
  };

  const handleEmailConfirm = (selectedMode) => {
    setMode(selectedMode);
    setShowConfirm(true);
    setConfirmError('');
    setOldPassword('');
  };

  const handleCloseConfirm = () => {
    setShowConfirm(false);
    setConfirmError('');
    setOldPassword('');
  };

  const handleCloseEmailModal = () => {
    setShowEmailModal(false);
    setEmailError('');
    setNewEmail('');
  };

  // üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è (–ø–µ—Ä–µ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º)
  const handlePasswordCheck = async () => {
    if (!oldPassword) {
      setConfirmError("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å.");
      return;
    }

    try {
      const data = await logining(user.user.login, oldPassword);
      console.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –ø—Ä–æ—à–ª–∞:", data);

      if (mode === "email") {
        // –µ—Å–ª–∏ —Ü–µ–ª—å ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å email
        setShowConfirm(false);
        setTimeout(() => setShowEmailModal(true), 300);
      } else if (mode === "password") {
        // –µ—Å–ª–∏ —Ü–µ–ª—å ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
        const resetResponse = await requestResetToken(data.login, oldPassword);
        console.log("–°—Å—ã–ª–∫–∞ —Å–±—Ä–æ—Å–∞:", resetResponse.resetLink);

        setAlertMessage("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É.");
        setAlertVariant("success");
        handleCloseConfirm();
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è:", err);
      const message =
        err.response?.data?.message ||
        err.message ||
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è.";
      setConfirmError(message);
    }
  };

  // üîπ –°–º–µ–Ω–∞ email
  const handleEmailChange = async () => {
    if (!newEmail) {
      setEmailError("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email.");
      return;
    }

    try {
      const response = await requestEmailChange(
        user.user.login,
        oldPassword, // –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–æ–ª—å, –≤–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ
        newEmail
      );

      setAlertMessage(
        response.message ||
        "–ü–∏—Å—å–º–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –Ω–æ–≤—ã–π email."
      );
      setAlertVariant("success");
      handleCloseEmailModal();
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ email:", err);
      const message =
        err.response?.data?.message ||
        err.message ||
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ email.";
      setEmailError(message);
    }
  };

  return (
    <div>
      <Header />
      <div className={styles.container}>
        <div className={styles.row}>
          <a className={styles.link__main} href="https://u-rm.ru/">
            <h5 className={styles.link__text}>–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</h5>
          </a>
          <div className={styles.logo__img} />
          <a className={styles.text}>–ü—Ä–æ—Ñ–∏–ª—å</a>
        </div>

        <div className={styles.containerMain}>
          <div className={styles.containerBlock}>
            <div className={styles.containerBlock__title}><h3>–°–≤—è–∑—å</h3></div>
            <div className={styles.containerBlock__text}>
              <p>Email: {user.user?.email || "‚Äî"}</p>
            </div>
            <div className={styles.containerBlock__text}>
              <p>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user.user?.tel || "‚Äî"}</p>
            </div>
            <div className={styles.containerBlock__text}>
              <p>–†–æ–ª—å: {user.user?.admin ? "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" : "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}</p>
            </div>

            <div className={styles.containerBlock__title}>
              <Button variant="success" onClick={() => handlePasswordConfirm("password")}>
                –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
              </Button>
            </div>

            {/* <div className={styles.containerBlock__title}>
              <Button variant="success" onClick={() => handleCloseEmailModal("email")}>
                –ò–∑–º–µ–Ω–∏—Ç—å/–¥–æ–±–∞–≤–∏—Ç—å email
              </Button>
            </div> */}

            {alertMessage && (
              <Alert variant={alertVariant} className="mt-3">
                {alertMessage}
              </Alert>
            )}

            {/* üî∏ –ú–æ–¥–∞–ª–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è */}
            <Modal show={showConfirm} onHide={handleCloseConfirm} centered>
              <Modal.Header closeButton>
                <Modal.Title>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</Modal.Title>
              </Modal.Header>
              <Modal.Body>
                <p>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è:</p>
                <input
                  type="password"
                  placeholder="–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å"
                  className={styles.input_confirm}
                  value={oldPassword}
                  onChange={e => setOldPassword(e.target.value)}
                />
                {confirmError && (
                  <Alert variant="danger" className="mt-3">{confirmError}</Alert>
                )}
              </Modal.Body>
              <Modal.Footer>
                <Button variant="secondary" onClick={handleCloseConfirm}>–û—Ç–º–µ–Ω–∞</Button>
                <Button variant="success" onClick={handlePasswordCheck}>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</Button>
              </Modal.Footer>
            </Modal>

            {/* üîπ –ú–æ–¥–∞–ª–∫–∞ —Å–º–µ–Ω—ã email */}
            <Modal show={showEmailModal} onHide={handleCloseEmailModal} centered>
              <Modal.Header closeButton>
                <Modal.Title>–ò–∑–º–µ–Ω–µ–Ω–∏–µ email</Modal.Title>
              </Modal.Header>
              <Modal.Body>
                <p>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã:</p>
                <input
                  type="email"
                  placeholder="–ù–æ–≤—ã–π email"
                  className={styles.input_confirm}
                  value={newEmail}
                  onChange={e => setNewEmail(e.target.value)}
                />
                {emailError && (
                  <Alert variant="danger" className="mt-3">{emailError}</Alert>
                )}
              </Modal.Body>
              <Modal.Footer>
                <Button variant="secondary" onClick={handleCloseEmailModal}>–û—Ç–º–µ–Ω–∞</Button>
                <Button variant="success" onClick={handleEmailChange}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</Button>
              </Modal.Footer>
            </Modal>
          </div>
        </div>
      </div>
      <Footer />
    </div>
  );
});

export default ProfilePage;
